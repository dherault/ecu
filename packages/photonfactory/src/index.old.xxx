// @ts-nocheck

type ParticuleType = PassType & {
  lifecycle: PassType
  children: Record<string, PassType>
  // add: (p: ParticuleType) => void
  data: any
  address: string
  initialized: boolean // Replace with memoize
  parent: ParticuleType
  Particule: (p: ParticuleType, address: string, self?: PassType) => ParticuleType
}

type PassType = (p?: ParticuleType | string) => ParticuleType

function Particule(parent: ParticuleType, address: string, lifecycle?: PassType): ParticuleType {
  function one(p?: ParticuleType | string): PassType {
    // console.log('1');
    // @ts-ignore
    if (typeof p === 'string' && typeof one.children[p] === 'function') return one.children[p](one.children[p])
    // console.log('2');

    // @ts-ignore
    return one.lifecycle(p || one)
  }

  return Object.assign(one, {
    lifecycle,
    children: {},
    data: null,
    initialized: false,
    address,
    parent,
    Particule,
    add: (p: ParticuleType) => {
      one.children[p.address] = p
    }
  })
}

const tree = Particule(null, 'root')

const canvas = Particule(tree, 'canvas', (p) => {
  console.log('canvas');

  p('draw')

  return p
})

const context = Particule(canvas, 'context', (p) => {
  console.log('context');

  if (p.initialized) return p

  p.data = {}
  p.initialized = true
  console.log('context init');

  return p
})

const draw = Particule(canvas, 'draw', (p) => {
  console.log('draw');
  const _ = canvas('context').data

  _.fillStyle = 'red'

  console.log('_', _);

  Object.keys(p.children).forEach((key) => {
    p.children[key]()
  })
  // console.log(canvas('context').data)

  return p
})

const drawNodes = Particule(draw, 'drawNodes', (p) => {
  console.log('drawNodes');
  const _ = canvas('context').data

  console.log('drawNodes _', _);

  // console.log(canvas('context').data)

  return p
})

tree.add(canvas)
canvas.add(context)
canvas.add(draw)
draw.add(drawNodes)

canvas()

// const tree = Particule(null, 'root', {
//   0: (p: ParticuleType, alter?: string) => {
//     return p(p, alter)
//   },
//   canvas: Particule(this, 'canvas', {
//     0: (p: ParticuleType) => {
//       p(p, 'draw')

//       return p
//     },
//     context: () => {
//       const canvas = document.getElementById('ecu-canvas')
//       return canvas.getContext('2d')
//     },
//     draw: (p) => {
//       p(p, 'context').beginPath()

//       return p
//     }
//   })
// }
